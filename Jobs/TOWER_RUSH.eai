#IFDEF GLOBAL

#ELSE

// ######################## Tower Rush ##############################
// #  Created by Strategy Master 13/07/05. Controls all part of the
// #  tower rush when tower rush check comes true.
// ##################################################################

function TowerRushBuilderControl takes unit u, location l, location t returns nothing
	local real builder_x = 0
	local real builder_y = 0
	local real angle = 0
	local real randomnum = GetRandomReal(80.0, 100.0)
	local unit loccheck = null
	local location unitloc = null
	local location loc = null

	if GetUnitTypeId(u) == old_id[racial_peon] then
		if DistanceBetweenPoints(l, t) > 300 and GetUnitCurrentOrder(u) != OrderId("move") then
			call CreateDebugTag("TRush: builder moving", 10, u, 4.00, 2.00)
			call IssuePointOrderLoc(u, "move", t)
		endif
		if DistanceBetweenPoints(l, t) <= 500 and GetUnitCurrentOrder(u) != OrderId("smart") and GetUnitCurrentOrder(u) != OrderId("repair") then  //Improve efficiency
			if towers_built >= 6 and race_tower_shop == 0 then  //Building shop
				set loc = GetSubtractionLoc(tower_target_loc, toweringplayerloc)
				set unitloc = GetProjectedLoc(tower_target_loc, loc, 1200)
				if race_tower_idX == 0 then
					set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_shop], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
				else
					set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_idX], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
				endif
				call SetUnitPathing( loccheck, false )
				set unitloc = null
				set unitloc = GetUnitLoc(loccheck)
				set builder_x = GetLocationX(unitloc)
				set builder_y = GetLocationY(unitloc)
				call RemoveLocation(loc)
				set loc = null
				call RemoveUnit(loccheck)
				set loccheck = null
				call RemoveLocation(unitloc)
				set unitloc = null
				if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then
					if GetGold() > (GetUnitGoldCost2(racial_shop)) and GetWood() > (GetUnitWoodCost2(racial_shop)) then
						call IssueBuildOrderById(u, old_id[racial_shop], builder_x, builder_y)
						set race_tower_shop = 1
						call CreateDebugTag("TRush: Building shop", 10, u, 4.00, 2.00)
					endif
				endif
			else  //Building tower
				// if towers_built != 0 then
					// set angle = Atan2(GetLocationY(toweringplayerloc) - GetLocationY(t), GetLocationX(toweringplayerloc) - GetLocationX(t))  //bj_DEGTORAD * bj_RADTODEG = 1
					// set t = Location(GetLocationX(t) + Cos(angle) * randomnum, GetLocationY(t) + Sin(angle) * randomnum)
				// endif
				if race_tower_idX == 0 then
					set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id], GetLocationX(t), GetLocationY(t), 270.0)
				else
					set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_idX], GetLocationX(t), GetLocationY(t), 270.0)
				endif
				call SetUnitPathing( loccheck, false )
				set unitloc = GetUnitLoc(loccheck)
				set builder_x = GetLocationX(unitloc)
				set builder_y = GetLocationY(unitloc)
				call RemoveUnit(loccheck)
				set loccheck = null
				call RemoveLocation(unitloc)
				set unitloc = null
				if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then
					if towers_built <= 4 or (towers_built > 4 and GetGold() > (GetUnitGoldCost2(race_tower_id) * 2) and (GetWood() > GetUnitWoodCost2(race_tower_id) * 2)) then
						call IssueBuildOrderById(u, old_id[race_tower_id], builder_x, builder_y)
						if towers_built != 0 then
							call CreateDebugTag("TRush: Building", 10, u, 4.00, 2.00)
						else
							call CreateDebugTag("TRush: First Building", 10, u, 4.00, 2.00)
							set towers_built = 1
						endif
					endif
				endif
			endif
		endif
	elseif GetUnitTypeId(u) == old_id[ANCIENT_PROTECT] then  //reduction tower, reuse towers that are too far away
		if DistanceBetweenPoints(l, t) >= 220 then
			if GetUnitCurrentOrder(u) != OrderId("unroot") then
				call IssueImmediateOrder( u, "unroot" )
			endif
			// set angle = Atan2(GetLocationY(toweringplayerloc) - GetLocationY(t), GetLocationX(toweringplayerloc) - GetLocationX(t))  //bj_DEGTORAD * bj_RADTODEG = 1
			// set t = Location(GetLocationX(t) + Cos(angle) * randomnum, GetLocationY(t) + Sin(angle) * randomnum)
			if race_tower_idX == 0 then
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id], GetLocationX(t), GetLocationY(t), 270.0)
			else
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_idX], GetLocationX(t), GetLocationY(t), 270.0)
			endif
			call SetUnitPathing( loccheck, false )
			set unitloc = GetUnitLoc(loccheck)
			call RemoveUnit(loccheck)
			set loccheck = null
			if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then  //move tree
				call IssuePointOrderLoc( u, "root", unitloc)
			endif
			call RemoveLocation(unitloc)
			set unitloc = null
		else
			call IssuePointOrderLoc( u, "root", l )
		endif
	else
		if DistanceBetweenPoints(l, t) > 200 then
			call CreateDebugTag("TRush: hero moving", 10, u, 4.00, 2.00)
			call ClearCaptainTargets()
			call IssuePointOrderLoc(u, "move", t)
		endif
		if DistanceBetweenPoints(l, toweringplayerloc) <= DistanceBetweenPoints(t, toweringplayerloc) + 230 then
			call ClearCaptainTargets()
			call UnitUseItemPoint( u, GetItemOfTypeOnUnit(race_tower_item, u), GetLocationX(l), GetLocationY(l))
		endif
		call RecycleGuardPosition(u)
	endif
endfunction

function TowerRushJob takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local integer i = 0
    local integer treetower = 30
    local integer v = 0
    local integer fastbuild = 1
    local integer randomnum = GetRandomInt(1,4)
    local integer requirement = race_towerrush_requirement
    local integer towerid = race_tower_id
    //local integer race_tower_upgrade1 = race_tower_upgrade1
    //local integer race_tower_upgrade2 = race_tower_upgrade2
    local integer buildtries = 12
    local real time_next_try = 0
    local real herostrength = 0
    local location loc0 = null
    local location loc1 = null
    local location loc2 = null
    local location loc3 = null
    local location loc4 = null
    local location loc30 = null
    local location t = null
    local location tt = null

	call DisplayToAllJobDebug("TOWER_RUSH Job START")

	if own_race == R_ELF then
		set buildtries = 8  //the tree can move
	endif

	call GroupEnumUnitsInRange(g, first_tower_point_x, first_tower_point_y, 1200, null)
	loop
		set u = FirstOfGroup(g)
		exitwhen u == null
		if GetOwningPlayer(u) == ai_player and GetUnitState(u, UNIT_STATE_LIFE) > 0 and IsUnitType(u, UNIT_TYPE_STRUCTURE) then
			if GetUnitTypeId(u) == old_id[towerid] then
				if randomnum == 4 and TownCount(race_tower_upgrade2) < 2 and race_tower_upgrade2 != 0 then
					call IssueImmediateOrderById(u, old_id[race_tower_upgrade2])
				elseif randomnum != 4 and race_tower_upgrade1 != 0 then
					call IssueImmediateOrderById(u, old_id[race_tower_upgrade1])
				endif
				if GetUnitTypeId(u) == old_id[ANCIENT_PROTECT] then
					set builder[treetower] = u
					set treetower = treetower + 1
				endif
				set i = i + 1
			endif
			if (race_tower_upgrade1 != 0 and GetUnitTypeId(u) == old_id[race_tower_upgrade1]) or ( race_tower_upgrade2 != 0 and GetUnitTypeId(u) == old_id[race_tower_upgrade2]) then
				set i = i + 1
			endif
			if GetUnitTypeId(u) == old_id[racial_shop] then
				set v = v + 1
			endif
			if race_has_power_build then
				set fastbuild = GetRandomInt(1, 4)
				if builder[fastbuild] != null and GetUnitCurrentOrder(builder[fastbuild]) != OrderId("smart") and GetUnitCurrentOrder(builder[fastbuild]) != OrderId("repair") then
					call IssueTargetOrder( builder[fastbuild], "repair", u )
				endif
			endif
		endif
		call GroupRemoveUnit(g,u)
	endloop
	set towers_built = i
	set race_tower_shop = v
	if towers_built >= 4 and tower_used_item == false then
		set tower_used_item = true  //No need used item
	endif

	if TownCount(race_towerrush_requirement) != 0 and towers_built > 0 then
		if towers_built <= 4 and race_simple_melee > 4 then
			if race_tower_upgrade1 == 0 then
				set gold_buffer = GetUnitGoldCost2(towerid) + 120
				set wood_buffer = GetUnitWoodCost2(towerid) + 140
			else
				set gold_buffer = GetUnitGoldCost2(race_tower_upgrade1) + 100
				set wood_buffer = GetUnitWoodCost2(race_tower_upgrade1) + 100
			endif
		elseif towers_built <= buildtries / 2 and race_simple_melee > 4 then
			set gold_buffer = GetUnitGoldCost2(towerid) + 50
			set wood_buffer = GetUnitWoodCost2(towerid) + 70
		else
			set gold_buffer = 0
			set wood_buffer = 0
		endif
	endif

//call Trace("Getting ready to tower rush")

	if GetPlayerSlotState(rushedplayer) != PLAYER_SLOT_STATE_PLAYING or GetPlayerUnitCount(rushedplayer,true) <= 0 or (towers_built == 0 and not (first_tower_point_x == 0 and first_tower_point_y == 0) and (((TownCountDone(hero[1]) + TownCountDone(hero[2]) + TownCountDone(hero[3])) != 0 and ((GetLocationNonCreepStrength(first_tower_point_x, first_tower_point_y, 1200) > (GetOwnStrength() * 4))) or (GetLocationNonCreepStrength(first_tower_point_x, first_tower_point_y, 2000) <= 0 and ai_time > 28)))) then    //or (builder[1] != null and (GetUnitState(builder[1], UNIT_STATE_LIFE) <= 0  and GetUnitState(builder[3], UNIT_STATE_LIFE) <= 0 and GetUnitState(builder[2], UNIT_STATE_LIFE) <= 0)) then
		//Prevent stop rush without the AI no built Heroes , but rushedplayer have Heroes (and neutral heroe hire time is 140 second = 28)
		//maybe enemy give up the Location,so temporary no need built
		call Trace("I have finished the tower rush")
		set gold_buffer = 0
		set wood_buffer = 0
		set race_tower_alliancetarget = false
		set tower_used_item = false
		call GroupClear(g)
		call GroupEnumUnitsInRange(g, first_tower_point_x, first_tower_point_y, 1200, null)
		loop
			set u = FirstOfGroup(g)
			exitwhen u == null
			if (GetUnitTypeId(u) == old_id[towerid] or GetUnitTypeId(u) ==old_id[race_tower_upgrade1] or GetUnitTypeId(u) ==old_id[race_tower_upgrade2]) or (race_tower_shop != 0 and GetUnitTypeId(u) == old_id[racial_shop]) then
				call IssueImmediateOrderById( u, 851976 )  //Cancel can recycling resources and prevent AI run FAST_BUILD job, judge id is prevent two players PlayerStartLocation too close(some Customize Maps)
			endif
			call GroupRemoveUnit(g,u)
		endloop
		set u = null
		set towerrush = false
		call DisplayToAllies(chat_stop_towerrush)
		if builder[0] != null and GetItemOfTypeOnUnit(race_tower_item, builder[0]) != null then
			call SetItemPawnable( GetItemOfTypeOnUnit(race_tower_item, builder[0]), true )  //can selling
			call SetItemDroppable( GetItemOfTypeOnUnit(race_tower_item, builder[0]), true )  //droppable
		endif
		call RecycleGuardPosition(builder[0])
		call RecycleGuardPosition(builder[1])
		call RecycleGuardPosition(builder[2])
		call RecycleGuardPosition(builder[3])
		call RecycleGuardPosition(builder[4])
		set builder[0] = null
		set builder[1] = null
		set builder[2] = null
		set builder[3] = null
		set builder[4] = null
		set builder[10] = null
		set builder[20] = null
		set rushedplayer = null
		call RemoveLocation(toweringplayerloc)
		call RemoveLocation(tower_target_loc)
		call RemoveLocation(loc0)
		call RemoveLocation(loc1)
		call RemoveLocation(loc2)
		call RemoveLocation(loc3)
		call RemoveLocation(loc4)
		call RemoveLocation(t)
		set toweringplayerloc = null
		set tower_target_loc = null
		set loc0 = null
		set loc1 = null
		set loc2 = null
		set loc3 = null
		set loc4 = null
		set t = null
		call DestroyGroup(g)
		set g = null
		set towers_built = 0
		set race_tower_shop = 0
		set first_tower_point_x = 0
		set first_tower_point_y = 0
		set enemy_point_x = 0
		set enemy_point_y = 0
		call SetAllianceTarget(null)
		call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(home_location), GetLocationY(home_location))
		call SetPeonsRepair(true)
		return
	endif

	set tt = GetSubtractionLoc(tower_target_loc, toweringplayerloc)
	if towers_built <= 4 then
		if GetLocationCreepStrength(GetLocationX(tower_target_loc), GetLocationY(tower_target_loc), 500) > 0 then
			set t = GetProjectedLoc(tower_target_loc, tt, 500)
		else
			set t = GetProjectedLoc(tower_target_loc, tt, 600)
		endif
		if towers_built == 0 then
			set first_tower_point_x = GetLocationX(t)
			set first_tower_point_y = GetLocationY(t)
		endif
	elseif towers_built < 8 or (own_race == R_ELF and towers_built < 6) then
		set t = GetProjectedLoc(tower_target_loc, tt, 300)
	else
		set t = Location(GetLocationX(tower_target_loc), GetLocationY(tower_target_loc))
	endif
	call RemoveLocation(tt)
	set tt =null

	if treetower != 0 then
		set i = 30
		loop
			exitwhen builder[i] == null or i > treetower or i >= 32  //prevent the tree standing up too much, no output
			set loc30 = GetUnitLoc(builder[i])
			if GetUnitState(builder[i], UNIT_STATE_LIFE) >= GetUnitState(builder[i], UNIT_STATE_MAX_LIFE) * 0.65 then  //UNIT_STATE_LIFE too low , dangerous to stand up
				call RemoveGuardPosition(builder[i])
				call TowerRushBuilderControl(builder[i], loc30, t)
			endif
			if GetUnitCurrentOrder(builder[i]) != OrderId("unroot") and GetUnitCurrentOrder(builder[i]) != OrderId("root") then
				call RecycleGuardPosition(builder[i])
			endif
			call RemoveLocation(loc30)
			set loc30 = null
			set builder[i] = null
			set i = i + 1
		endloop
	endif

	call GroupClear(g)
	call GroupEnumUnitsOfPlayer(g, ai_player, null)
	set g = SelectByAlive(g,true)
	set g = SelectById(g, old_id[racial_peon], true)
	set g = GetNearestSubGroupOfGroup(g, tower_target_loc, race_tower_peon)  //g not destroyed memory leak - need to modify the code

	if (builder[1] == null or GetUnitState(builder[1], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) >= 5 and IsUnitType(builder[1], UNIT_TYPE_STRUCTURE) != true then  //if build by peon become(like WISP), need judge UNIT_TYPE_STRUCTURE
		set builder[1] = FirstOfGroup(g)
	endif
	call GroupRemoveUnit(g,builder[1])
	if (builder[2] == null or GetUnitState(builder[2], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) >= 6 and IsUnitType(builder[2], UNIT_TYPE_STRUCTURE) != true then
		set builder[2] = FirstOfGroup(g)
	endif
	call GroupRemoveUnit(g,builder[2])
	if own_race != R_UNDEAD then
		if (builder[3] == null or GetUnitState(builder[3], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) >= 7 and IsUnitType(builder[3], UNIT_TYPE_STRUCTURE) != true then
			set builder[3] = FirstOfGroup(g)
		endif
		call GroupRemoveUnit(g,builder[3])
		if (builder[4] == null or GetUnitState(builder[4], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) >= 8 and IsUnitType(builder[4], UNIT_TYPE_STRUCTURE) != true then
			set builder[4] = FirstOfGroup(g)
		endif
		call GroupRemoveUnit(g,builder[4])
	endif

	if towers_built < buildtries then
		if (TownCountDone(race_towerrush_requirement) == 0 or ((TownCountDone(hero[1]) + TownCountDone(hero[2]) + TownCountDone(hero[3])) == 0) and towers_built == 0) then
			set time_next_try = 5
		else
			if builder[0] != null and GetItemNumberOnUnit(race_tower_item, builder[0]) != 0 then
				call RemoveGuardPosition(builder[0])
				set loc0 = GetUnitLoc(builder[0])
				call TowerRushBuilderControl(builder[0], loc0, t)
			endif
			if IsPointBlighted(GetLocationX(t), GetLocationY(t)) and tower_used_item == false and IsPointBlighted(GetLocationX(home_location), GetLocationY(home_location)) then
				set tower_used_item = true  //item used success
			endif
			call RemoveGuardPosition(builder[1])
			call RemoveGuardPosition(builder[2])
			set loc1 = GetUnitLoc(builder[1])
			set loc2 = GetUnitLoc(builder[2])
			if own_race != R_UNDEAD then
				call RemoveGuardPosition(builder[3])
				call RemoveGuardPosition(builder[4])
				set loc3 = GetUnitLoc(builder[3])
				set loc4 = GetUnitLoc(builder[4])
			endif
			if race_militia_available then       // try militia
			  if DistanceBetweenPoints(loc1, home_location) < 1100 then
				call IssueImmediateOrder(builder[1], "militia" )
			  endif
			  if DistanceBetweenPoints(loc2, home_location) < 1100 then
				call IssueImmediateOrder(builder[2], "militia" )
			  endif
			  if DistanceBetweenPoints(loc3, home_location) < 1100 then
				call IssueImmediateOrder(builder[3], "militia" )
			  endif
			  if DistanceBetweenPoints(loc4, home_location) < 1100 then
				call IssueImmediateOrder(builder[4], "militia" )
			  endif
			elseif GetUnitAbilityLevel(builder[1], 'ANha') != 0 or GetUnitAbilityLevel(builder[1], 'Ahar') != 0 then  // try returnresources
			  call IssueImmediateOrder( builder[1], "returnresources" )
			  call IssueImmediateOrder( builder[2], "returnresources" )
			  call IssueImmediateOrder( builder[3], "returnresources" )
			  call IssueImmediateOrder( builder[4], "returnresources" )
			  call Sleep(4)
			endif

			//open automatic repair
			if own_race == R_UNDEAD then
			  call IssueImmediateOrderById(builder[1], 852203)
			  call IssueImmediateOrderById(builder[2], 852203)
			elseif own_race == R_ELF then
			  call IssueImmediateOrderById(builder[1], 852162)
			  call IssueImmediateOrderById(builder[2], 852162)
			  call IssueImmediateOrderById(builder[3], 852162)
			  call IssueImmediateOrderById(builder[4], 852162)
			elseif own_race == R_HUMAN or own_race == R_ORC then
			  call IssueImmediateOrderById(builder[1], 852025)
			  call IssueImmediateOrderById(builder[2], 852025)
			  call IssueImmediateOrderById(builder[3], 852025)
			  call IssueImmediateOrderById(builder[4], 852025)
			endif
			set time_next_try = 2

			call TowerRushBuilderControl(builder[1], loc1, t)
			call TowerRushBuilderControl(builder[2], loc2, t)
			if own_race != R_UNDEAD then
				call TowerRushBuilderControl(builder[3], loc3, t)
				call TowerRushBuilderControl(builder[4], loc4, t)
			endif
		endif
	endif

	call DestroyGroup(g)
	set g = null
	call RemoveLocation(loc0)
	call RemoveLocation(loc1)
	call RemoveLocation(loc2)
	call RemoveLocation(loc3)
	call RemoveLocation(loc4)
	call RemoveLocation(t)
	set loc0 = null
	set loc1 = null
	set loc2 = null
	set loc3 = null
	set loc4 = null
	set t = null
	call TQAddJob(RMax(time_next_try,1), TOWER_RUSH, 0)
endfunction

#ENDIF